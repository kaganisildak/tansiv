---
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  RUST_VERSION: 1.42.0

# unstable, yeah !
image: simgrid/unstable:latest

stages:
  - build

###############################################################################
#
# Build tansiv and some cppunit stuffs
#   -- test locally:
#      $) gitlab-runner exec docker tansiv
#
###############################################################################
tansiv:
  stage: build
  script:
    #
    # Some missing build tools
    #
    - apt-get update
    - apt-get install -y curl git build-essential pkg-config libboost-dev cmake libcppunit-dev
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init
    - sh rustup-init -y --profile minimal --default-toolchain $RUST_VERSION
    - export PATH=$HOME/.cargo/bin:$PATH
    #
    # Build tests
    # TODO(msimonin): make all (but we'll need to adapt all vsg clients ...)
    #
    - mkdir -p build
    - cd build
    - cmake .. && make tests
    # cpp unittests
    - ./tests
    - cd ..
    # copying the compiled examples for subsequent jobs
    - cp -r build/examples /opt
    # copying the platform file for subsequent jobs
    - cp -r platform /opt
    # copying all the /opt dir to export it as an artifact for subsequent jobs
    # (we can only export subdirectories of CI_BUILDS_DIR)
    - cp -r /opt opt
  artifacts:
    paths:
      - opt
      - build/tests.xml
    # expected /opt structure:
    # /opt
    #   examples/ -> compiled examples
    #   platform/ -> some simgrid plaform files
    #   tansiv/ -> result of tansiv make install (include + lib + bin)
    #   qemu/ -> result of qemu make install (include + lib + bin)


###############################################################################
#
# Build fake-vm
#   -- test locally:
#      $) gitlab-runner exec docker fake-vm --docker-volumes $(pwd)/opt:/opt
#
###############################################################################
fake-vm:
  stage: build
  image: rust:1.42.0-slim-buster
  script:
  - apt-get update
  - apt-get install -y build-essential
  - cd src/fake-vm
  - make build
  - make test


###############################################################################
#
# Qemu compilation
# inputs:
#   opt/ -> artifact of the build phase
#
###############################################################################
qemu:
  stage: qemu
  script:
    - cp -r opt /opt
    - apt-get update
    - apt-get install -y git build-essential pkg-config libboost-dev cmake libcppunit-dev
    # Build qemu with our modified version of libslirp
    - apt-get install -y python libglib2.0-dev libpixman-1-dev
    - git clone --depth 1 -b v4.2.0 https://github.com/qemu/qemu
    - cd qemu
    # replace the slirp submodule by ours
    - git submodule deinit slirp
    - git rm slirp
    - git submodule add $(pwd)/../src/slirp slirp
    - mkdir -p build /opt/qemu
    - cd build && ../configure --prefix=/opt/qemu --target-list=x86_64-softmmu && make -j$(nproc) && make install && cd ..
    - cd ..

###############################################################################
#
# Dummy ping/pong example
# inputs:
#   opt/ -> artifact of the build phase
#
###############################################################################
dummy_ping:
  stage: test
  script:
    - export PATH=$PATH:$(pwd)/opt/tansiv/usr/local/bin
    - cd opt && tansiv platform/nova_cluster.xml examples/dummy_ping/deployment.xml
###############################################################################
#
# constant_rate example (run under tesh)
# inputs:
#   opt/ -> artifact of the build phase
#
###############################################################################
constant_rate:
  stage: test
  script:
    - apt update && apt install -y python3
    - export PATH=$PATH:$(pwd)/opt/tansiv/usr/local/bin
    - cd opt && tesh examples/constant_rate/constant_rate.tesh