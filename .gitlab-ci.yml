---
variables:
  # https://docs.gitlab.com/ee/ci/runners/README.html#git-submodule-strategy
  # normal -> only top level are fetched before the job starts
  GIT_SUBMODULE_STRATEGY: normal
  # Was here to fix a TLS proxy issue we had (this disable the custom hook implemented in the CI infrastructure)
  # LD_PRELOAD: ""
  RUST_VERSION: 1.46.0

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /dbg\//
      when: never
    - if: $CI_COMMIT_TITLE =~ /WIP/
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

stages:
  - publish

# unstable, yeah !
image: simgrid/unstable:latest

docker:
  image: docker:latest
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG != null
      when: never
    - when: always
  tags:
    - large
  script:
    # login iff we're on gitlab ci
    - |
      if [[ -n "${CI_JOB_TOKEN}" ]]
      then
        docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        DOCKER_LABEL="tansiv-commit-id=${CI_COMMIT_SHORT_SHA}"
        if [ -n "$CI_COMMIT_BRANCH" ]; then
          BRANCH=$CI_COMMIT_BRANCH
        elif [ -n "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" ]; then
          BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
        else
          echo "Unhandled case for publishing Docker image. External pull request?"
          exit 1
        fi
        DOCKER_IMAGE="${CI_REGISTRY_IMAGE}/tansiv-${BRANCH}:latest"
        docker build -t "$DOCKER_IMAGE" --label "$DOCKER_LABEL" .
        docker push ${DOCKER_IMAGE}
      else
        export DOCKER_IMAGE=tansiv:latest
        docker build -t ${DOCKER_IMAGE} .
      fi

persistent-docker:
  image: docker:latest
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG != null
      when: always
    - when: never
  tags:
    - large
  script:
    - |
      apk update
      apk add git
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
      DOCKER_IMAGE="${CI_REGISTRY_IMAGE}/tansiv:${CI_COMMIT_TAG}"
      FOUND=
      branches=$(git for-each-ref --format='%(refname:lstrip=3)' refs/remotes/origin --contains ${CI_COMMIT_SHORT_SHA})
      echo "Candidate branches to re-use latest image from: $branches"
      for branch in $branches; do
        if [ "$branch" = 'HEAD' ]; then
          continue
        fi
        image=${CI_REGISTRY_IMAGE}/tansiv-${branch}:latest
        echo "Trying image '$image'..."
        docker pull ${image}
        short_sha=$(docker image inspect --format='{{index .Config.Labels "tansiv-commit-id"}}' ${image})
        if [ "$short_sha" = "$CI_COMMIT_SHORT_SHA" ]; then
          echo "Re-using image '$image'"
          docker tag ${image} ${DOCKER_IMAGE}
          FOUND=y
          break
        fi
      done
      if [ -z "$FOUND" ]; then
        echo 'No re-use opportunity detected. Building fresh image...'
        DOCKER_LABEL="tansiv-commit-id=${CI_COMMIT_SHORT_SHA}"
        docker build -t "$DOCKER_IMAGE" --label "$DOCKER_LABEL" .
      fi
      docker push ${DOCKER_IMAGE}
