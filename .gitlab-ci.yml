---
variables:
  # https://docs.gitlab.com/ee/ci/runners/README.html#git-submodule-strategy
  # normal -> only top level are fetched before the job starts
  GIT_SUBMODULE_STRATEGY: normal
  LD_PRELOAD: ""
  RUST_VERSION: 1.46.0

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /dbg\//
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /dev\// && $CI_COMMIT_TITLE =~ /WIP/
      when: never
    - when: always

stages:
- build
- publish

# unstable, yeah !
image: simgrid/unstable:latest

build:
  stage: build
  tags:
  - large
  script:
  #
  # Some missing build tools
  #
  - export PROJECT_DIR=$(pwd)
  - apt-get update
  - apt-get install -y curl git build-essential pkg-config libboost-dev cmake libcppunit-dev libglib2.0-dev clang libclang-dev libpixman-1-dev flex bison
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init
  - sh rustup-init -y --profile minimal --default-toolchain $RUST_VERSION
  - export PATH=$HOME/.cargo/bin:$PATH
  - mkdir -p build
  # build test
  - cd build
  - cmake .. && make config-host.h
  # fake-vm tests
  - cd ${PROJECT_DIR}/src/fake-vm
  - make build
  - make test
  - cd ${PROJECT_DIR}/build
  - make
  # NOTE(msimonin): as long as https://gitlab.inria.fr/quinson/2018-vsg/-/issues/5 is around
  # we run our tests isolated in different process.
  # This is far from ideal since reports will be spread in the output of each process
  # But at least catch2 lets use specify this easily...
  # But ...
  #   for some reason this fails: ./tests --list-test-names-only | xargs -d "\n" -n 1 ./tests
  #   grrr!
  - ./tests "VSG receive one message"
  - ./tests "VSG deliver one message"
  - ./tests "VSG send piggyback port"
  - ./tests "piggyback port"

docker:
  image: docker:latest
  stage: publish
  tags:
  - large
  script:
    # login iff we're on gitlab ci
  - |
    if [[ -n "${CI_JOB_TOKEN}" ]]
    then
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
      export DOCKER_IMAGE=${CI_REGISTRY_IMAGE}/tansiv:${CI_COMMIT_SHORT_SHA}
      export DOCKER_IMAGE_LATEST=${CI_REGISTRY_IMAGE}/tansiv:latest
      docker build -t ${DOCKER_IMAGE} .
      docker push ${DOCKER_IMAGE}
      docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE_LATEST}
      docker push ${DOCKER_IMAGE_LATEST}
    else
      export DOCKER_IMAGE=tansiv:latest
      docker build -t ${DOCKER_IMAGE} .
    fi