# Outils de test de sandbox

Al-Khaser: https://github.com/LordNoteworthy/al-khaser/tree/master

S'appuie en partie sur un programme plus ancien, plus maintenu apparemment :
pafish: https://github.com/a0rtega/pafish

InviZzzible: https://github.com/CheckPointSW/InviZzzible

Recensement daté de 2018 : https://github.com/seifreed/awesome-sandbox-evasion


# Exemples d'articles analysant les pratiques de détection de sandbox

Techniques catégorisées par le MITRE :
https://attack.mitre.org/techniques/T1497/

Analyse d'éditeurs d'anti-virus :
https://www.mcafee.com/blogs/other-blogs/mcafee-labs/evolution-of-malware-sandbox-evasion-tactics-a-retrospective-study/
https://evasions.checkpoint.com/

Plus académique :

@ARTICLE{9018111,

  author={D. C. {D’Elia} and E. {Coppa} and F. {Palmaro} and L. {Cavallaro}},

  journal={IEEE Transactions on Information Forensics and Security},

  title={On the Dissection of Evasive Malware},

  year={2020},

  volume={15},

  number={},

  pages={2750-2765},}

@article{10.1145/3365001,
        author = {Afianian, Amir and Niksefat, Salman and Sadeghiyan, Babak and Baptiste, David},
        title = {Malware Dynamic Analysis Evasion Techniques: A Survey},
        year = {2019},
        issue_date = {January 2020},
        publisher = {Association for Computing Machinery},
        address = {New York, NY, USA},
        volume = {52},
        number = {6},
        issn = {0360-0300},
        url = {https://doi.org/10.1145/3365001},
        doi = {10.1145/3365001},
        journal = {ACM Comput. Surv.},
        month = nov,
        articleno = {126},
        numpages = {28},
        keywords = {anti-debugging, Malware, evasion techniques, sandbox evasion}
}

Rui Tanabe, Wataru Ueno, Kou Ishii, Katsunari Yoshioka, Tsutomu Matsumoto, Takahiro Kasama, Daisuke Inoue, Christian Rossow. Evasive Malware via Identifier Implanting. DIMVA 2018: Detection of Intrusions and Malware, and Vulnerability Assessment, June 2018, DOI: 10.1007/978-3-319-93411-2_8
Alexei Bulazel and Bülent Yener.

A survey on automated dynamic malware analysis evasion and counter-evasion: PC, Mobile, and Web.
In Proceedings of the 1st Reversing and Offensive-oriented Trends Symposium, ROOTS, pages 2:1–2:21, New York, NY, USA, 2017. ACM.

M. Polino, A. Continella, S. Mariani, S. D’Alessio, L. Fontana, F. Gritti, and S. Zanero.
Measuring and defeating anti-instrumentation-equipped malware.
In Proceedings of the 14th Intl Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 73–96, 2017.

Ashish Jadhav, Deepti Vidyarthi, Hemavathy M. Evolution of evasive malwares: A survey. 2016 International Conference on Computational Techniques in Information and Communication Technologies (ICCTICT), March 2016, DOI: 10.1109/ICCTICT.2016.7514657

Christopher Kruegel. Full System Emulation: Achieving Successful Automated Dynamic Analysis of Evasive Malware. BlackHat 2014.

@inproceedings{10.1145/2046707.2046740,
author = {Kolbitsch, Clemens and Kirda, Engin and Kruegel, Christopher},
title = {The Power of Procrastination: Detection and Mitigation of Execution-Stalling Malicious Code},
year = {2011},
isbn = {9781450309486},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2046707.2046740},
doi = {10.1145/2046707.2046740},
abstract = {Malware continues to remain one of the most important security problems on the Internet today. Whenever an anti-malware solution becomes popular, malware authors typically react promptly and modify their programs to evade defense mechanisms. For example, recently, malware authors have increasingly started to create malicious code that can evade dynamic analysis.One recent form of evasion against dynamic analysis systems is stalling code. Stalling code is typically executed before any malicious behavior. The attacker's aim is to delay the execution of the malicious activity long enough so that an automated dynamic analysis system fails to extract the interesting malicious behavior. This paper presents the first approach to detect and mitigate malicious stalling code, and to ensure forward progress within the amount of time allocated for the analysis of a sample. Experimental results show that our system, called HASTEN, works well in practice, and that it is able to detect additional malicious behavior in real-world malware samples.},
booktitle = {Proceedings of the 18th ACM Conference on Computer and Communications Security},
pages = {285–296},
numpages = {12},
keywords = {emulation, malware analysis, evasion},
location = {Chicago, Illinois, USA},
series = {CCS '11}
}

# Outils d'émulation de réseau

EVE - The Emulated Virtual Environment For Network, Security and DevOps Professionals
www.eve-ng.net
=> Plein d'appliances pour représenter des équipements réseau par des VMs

J. Nutaro and O. Ozmen, "Using Simulation to Quantify the Reliability of Control Software," 2019 Winter Simulation Conference (WSC), National Harbor, MD, USA, 2019, pp. 3267-3276, doi: 10.1109/WSC40007.2019.9004839.

Guillaume Delbergue, Mark Burton, Frederic Konrad, Bertrand Le Gal, Christophe Jego. QBox: an industrial solution for virtual platform simulation using QEMU and SystemC TLM-2.0. 8th European Congress on Embedded Real Time Software and Systems (ERTS 2016), Jan 2016, TOULOUSE, France. hal-01292317

Alessandro Lonardi, Graziano Pravadelli. On the Co-simulation of SystemC with QEMU and OVP Virtual Platforms. 22th IFIP/IEEE International Conference on Very Large Scale Integration - System on a Chip (VLSI-SoC 2014), Oct 2014, Playa del Carmen, Mexico. pp.110-128, ⟨10.1007/978-3-319-25279-7_7⟩. ⟨hal-01383732⟩

Massimiliano D'angelo, Alberto Ferrari, Ommund Ogaard, Claudio Pinello, Alessandro Ulisse.A Simulator based on QEMU and SystemC for Robustness Testing of a Networked Linux-based FireDetection and Alarm System. Embedded Real Time Software and Systems (ERTS2012), Feb 2012,Toulouse, France. hal-02192275

M.-C. Chiang, T.-C. Yeh, and G.-F. Tseng, “A qemu and systemc-based cycle-accurate iss for performance estimation on soc development,”Computer-Aided Design of Integrated Circuits and Systems, IEEE Transactions on, vol. 30, no. 4, pp. 593–606, April 2011.

2020/10/06 https://www.defenseworld.net/news/28014/Raytheon_Launches_Virtualized_Testing_Solution_To_Assess_Cyber_Vulnerabilities/

# Unsorted

2020/10/06 https://www.businessinsider.in/tech/news/malware-infiltrates-the-defenses-of-common-antivirus-softwares-like-mcafee-kaspersky-symantec-and-others/articleshow/78515377.cms

@article{article,
author = {Carpenter, Matthew and Liston, Tom and Skoudis, Ed},
year = {2007},
month = {06},
pages = {62-65},
title = {Hiding Virtualization from Attackers and Malware},
volume = {5},
journal = {Security & Privacy, IEEE},
doi = {10.1109/MSP.2007.63}
}

@article{article,
author = {Sgandurra, Daniele and Lupu, Emil},
year = {2016},
month = {02},
pages = {1-38},
title = {Evolution of Attacks, Threat Models, and Solutions for Virtualized Systems},
volume = {48},
journal = {ACM Computing Surveys},
doi = {10.1145/2856126}
}

@article{article,
author = {Or-Meir, Ori and Nissim, Nir and Elovici, Yuval and Rokach, Lior},
year = {2019},
month = {09},
pages = {1-48},
title = {Dynamic Malware Analysis in the Modern Era—A State of the Art Survey},
volume = {52},
journal = {ACM Computing Surveys},
doi = {10.1145/3329786}
}

@inproceedings{inproceedings,
author = {Filho, Ailton and Rodríguez, Ricardo and Feitosa, Eduardo},
year = {2020},
month = {05},
pages = {3-13},
title = {Reducing the Attack Surface of Dynamic Binary Instrumentation Frameworks},
isbn = {978-981-13-9154-5},
doi = {10.1007/978-981-13-9155-2_1}
}

@inproceedings{inproceedings,
author = {Hsu, Chia-Wei and Shih, Fan-Syun and Wang, Chi-Wei and Winston, S.},
year = {2013},
month = {06},
pages = {80-89},
title = {Divergence Detector: A Fine-Grained Approach to Detecting VM-Awareness Malware},
isbn = {978-1-4799-0406-8},
journal = {Proceedings - 7th International Conference on Software Security and Reliability, SERE 2013},
doi = {10.1109/SERE.2013.23}
}

Kirat, D., Vigna, G., Kruegel, C.: BareCloud: bare-metal analysis-based evasive malware detection. In: Proceedings of the 23rd USENIX Security Symposium (2014)

X. Wang, S. Zhu, D. Zhou, and Y. Yang.
Droid-AntiRM: Taming control flow anti-analysis to support automated dynamic analysis of android malware.
In Proceedings of the 33rd Annual Computer Security Applica- tions Conference, ACSAC 2017, pages 350–361, New York, NY, USA, 2017. ACM.

Ali Davanian, Zhenxiao Qi, Yu Qu, and Heng Yin, DECAF++: Elastic Whole-System Dynamic Taint Analysis, In the 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID), September 2019. (If you wish to cite the new optimized version of DECAF, please cite this paper)

https://adalogics.com/blog/Building-a-custom-malware-sandbox-with-PANDA-Part-1

"Make it work, make it right, make it fast: building a platform-neutral whole-system dynamic binary analysis platform", Andrew Henderson, Aravind Prakash, Lok Kwong Yan, Xunchao Hu, Xujiewen Wang, Rundong Zhou, and Heng Yin, to appear in the International Symposium on Software Testing and Analysis (ISSTA'14), San Jose, CA, July 2014.(If you wish to cite DECAF, please cite this paper)

@inproceedings{10.1145/1455770.1455779,
author = {Dinaburg, Artem and Royal, Paul and Sharif, Monirul and Lee, Wenke},
title = {Ether: Malware Analysis via Hardware Virtualization Extensions},
year = {2008},
isbn = {9781595938107},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1455770.1455779},
doi = {10.1145/1455770.1455779},
abstract = {Malware has become the centerpiece of most security threats on the Internet. Malware analysis is an essential technology that extracts the runtime behavior of malware, and supplies signatures to detection systems and provides evidence for recovery and cleanup. The focal point in the malware analysis battle is how to detect versus how to hide a malware analyzer from malware during runtime. State-of-the-art analyzers reside in or emulate part of the guest operating system and its underlying hardware, making them easy to detect and evade. In this paper, we propose a transparent and external approach to malware analysis, which is motivated by the intuition that for a malware analyzer to be transparent, it must not induce any side-effects that are unconditionally detectable by malware. Our analyzer, Ether, is based on a novel application of hardware virtualization extensions such as Intel VT, and resides completely outside of the target OS environment. Thus, there are no in-guest software components vulnerable to detection, and there are no shortcomings that arise from incomplete or inaccurate systememulation. Our experiments are based on our study of obfuscation techniques used to create 25,000 recent malware samples. The results show that Ether remains transparent and defeats the obfuscation tools that evade existing approaches.},
booktitle = {Proceedings of the 15th ACM Conference on Computer and Communications Security},
pages = {51–62},
numpages = {12},
keywords = {emulation, virtualization, unpacking, malware analysis, dynamic analysis},
location = {Alexandria, Virginia, USA},
series = {CCS '08}
}
